{"version":3,"sources":["square.js","board.js","game.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","PLAYERS","true","false","Game","state","history","Array","fill","isXNext","showStep","slice","current","winner","updatedSquares","calculateWinner","setState","length","status","getStatus","moves","getMoves","handleClick","buttonDesc","map","move","step","jumpTo","line","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2a1953b.chunk.js","sourcesContent":["/** @format */\n\nimport React from \"react\";\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nexport default Square;\n","/** @format */\n\nimport React from \"react\";\n\nimport Square from \"./square\";\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","/** @format */\n\nimport React from \"react\";\nimport Board from \"./board\";\n\nconst PLAYERS = {\n  true: \"X\",\n  false: \"O\",\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      isXNext: true,\n      showStep: 0,\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.showStep + 1);\n    const current = history[this.state.showStep];\n    if (this.state.winner || current[i]) {\n      // preventing overwriting\n      return;\n    }\n    let updatedSquares = [...current.squares];\n    updatedSquares[i] = PLAYERS[this.state.isXNext];\n    let winner = this.calculateWinner(updatedSquares);\n    this.setState({\n      history: [...history, { squares: updatedSquares }],\n      isXNext: !this.state.isXNext,\n      winner: winner,\n      showStep: history.length,\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.showStep];\n\n    let status = this.getStatus();\n    let moves = this.getMoves();\n\n    return (\n      <div>\n        <h1> Tic Tac Toe</h1>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={current.squares}\n              onClick={(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <div>\n              <ol>{moves}</ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  getStatus() {\n    if (this.state.winner) {\n      return `Winner is ${this.state.winner}`;\n    } else {\n      return `Next Player: ${PLAYERS[this.state.isXNext]}`;\n    }\n  }\n\n  getMoves() {\n    const history = this.state.history;\n    let buttonDesc;\n    return history.map((move, step) => {\n      if (step === 0) {\n        buttonDesc = \"Go to game start\";\n      } else {\n        buttonDesc = `Go to move #${step}`;\n      }\n      return (\n        <li key={\"step\" + step}>\n          <button onClick={() => this.jumpTo(step)}>{buttonDesc}</button>\n        </li>\n      );\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      winner: this.calculateWinner(this.state.history[step].squares),\n      showStep: step,\n      isXNext: step % 2 === 0,\n    });\n  }\n\n  calculateWinner(squares) {\n    let results = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let line of results) {\n      let [a, b, c] = line;\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[b] === squares[c]\n      ) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n}\n\nexport default Game;\n","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport Game from \"./game\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}